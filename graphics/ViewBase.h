/* -*- mode: c++ -*- */

/** @file

hippodraw::ViewBase class interface

Copyright (C) 2000-2006   The Board of Trustees of The Leland
Stanford Junior University.  All Rights Reserved.

$Id: ViewBase.h,v 1.174 2007/03/23 22:41:33 xiefang Exp $

*/

#ifndef _ViewBase_H_
#define _ViewBase_H_

#include "LineStyle.h"
#include "Rectangle.h"
#include "SymbolType.h"

#include "axes/AxesType.h"
#include "pattern/Observer.h"

namespace hippodraw {

class Color;
class FontBase;
class PlotterBase;
class Range;

/** The abstract base class for views.  A view is a rectangle on the
    graphic device into which drawing is done.  Derived classes
    provide a concrete implementation based on some graphics toolkit.
    Examples are the QtView and EpsView classes.  

    A view is an Observer of a PlotterBase object, the base class of
    plotters.  When it receives the Observer::update message, it
    initiates drawing by calling back the PlotterBase object with a
    pointer to itself.  Drawing can also be initiated by an
    application by calling the PlotterBase object with view.  For
    example, an EPSF file can be generated by a plotter by calling it
    with an EpsView.

    Views are responsible for the translation from the data coordinate
    space used by the PlotterBase object to the graphics device
    coordinate space.  They maintain their own coordinate system as @c
    double objects to be compatible with scalable graphics tool kits
    such as Postscript.

    @request Also being able to capture these values for input to the
    range widgets (e.g., set Z High to _this_ bin's value, set Z low
    to _that_ bin's value) would be nice.

    @todo Why doesn't getXXXRect() return reference?

    @author Paul F. Kunz <Paul_Kunz@slac.stanford.edu>
    @author Sanket Biren Malde <sanket@stanford.edu>
    @author Oded Wurman <owurman@stanford.edu>
    @author Xie Fang <xiefang@stanford.edu>
*/

class MDL_HIPPOPLOT_API ViewBase : public Observer
{
protected:

  /** The plotter object used by this view. Although the plotter
      object was created externally, the view owns the plotter
      object. */
  PlotterBase * m_plotter;

public:

  /** The default constructor. */
  ViewBase();

  /** The following constructor takes a plotter as an argument to use
      with a drawing.  */
  ViewBase ( PlotterBase * plotter );

  /** The copy constructor. */
  ViewBase ( const ViewBase & );

  /** The virtual destructor. */
  virtual ~ViewBase();

  /** Sets the PlotterBase object to @a plotter. The ViewBase object
      does not own the plotter.  If the plotter is being changed, it
      is up to client code to decide to destroy the previous plotter
      or not. */
  virtual void setPlotter ( PlotterBase * plotter );

  /** Returns the plotter used by this view. */
  PlotterBase * getPlotter () const;

  /** Returns the plotter used by this view. */
  PlotterBase * getPlotter ();

  /** Implements the update method of the Observer pattern.  Derived
      classes should send a message to what ever object is the parent
      of this ViewBase object. 
  */
  virtual void update ( const Observable * ) = 0;

  /** Draws itself. */
  virtual void drawSelf();

  /** Draws multiple line segments - that is, a line between x0,y0 and
      x1,y2, another between x2,y2 and x3,y3 and so on. 
      @p x pairs of coordinates in user space on the X axis for the beginning 
         and the end of the line segment.  
      @p y pairs of coordinates in user space on the Y axis for the beginning 
         and the end of the line segment.  
      @p style the line style.  
      @p color The color 
      @p size The thickness of the line. */
  virtual void drawLines ( const std::vector< double > & x,
			   const std::vector< double > & y,
			   Line::Style style,
			   const Color & color,
			   double size ) = 0;

  /** Draws multiple line segments, each with a different color - that
      is, a line between x0,y0 and x1,y1, with color[0] =color[1]
      another between x2,y2 and x3,y3 with color[2]=color[3] and so
      on.  

      @p x pairs of coordinates in user space on the X axis for the
      beginning and the end of the line segment.

      @p y pairs of coordinates in user space on the Y axis for the
      beginning and the end of the line segment.

      @p style the line style.  

      @p color The RGB values for the color of the line.

      @p size The thickness of the line.

  */
  virtual void drawColorLines ( const std::vector< double > & x,
				const std::vector< double > & y,
				Line::Style style,
				const std::vector < Color > & color,
				double size ) = 0;

  /** Draws multiple line segments.  
      @p x pairs of coordinates in view space on the X axis for the beginning 
         and the end of the line segment.  
      @p y pairs of coordinates in view space on the Y axis for the beginning 
         and the end of the line segment.  
      @p style the line style.  
      @p color if @c true, use the display's point color; otherwise, use 
         the default color. 
      @p size The thickness of the line. */
  virtual void drawViewLines ( const std::vector< double > & x,
			       const std::vector< double > & y,
			       Line::Style style,
			       bool color,
			       double size ) = 0;

   /** Draws multiple line segments.  
      @p x pairs of coordinates in view space on the X axis for the beginning 
         and the end of the line segment.  
      @p y pairs of coordinates in view space on the Y axis for the beginning 
         and the end of the line segment.  
      @p style the line style.  
      @p color The color
      @p size The thickness of the line. */
  virtual void drawViewLines ( const std::vector< double > & x,
			       const std::vector< double > & y,
			       Line::Style style,
			       const Color & color,
			       double size ) = 0;
 /** Draws a polyline.  
      @p xpoints points along the X axis.
      @p ypoints points along the Y axis.
      @p style the line style. 
      @p color The color.
      @p size The thickness of the line. */
  virtual void drawPolyLine ( const std::vector< double > & xpoints,
			      const std::vector< double > & ypoints, 
			      Line::Style style,
			      const Color & color,
			      double size ) = 0;

  /** Draws a polygon.
      @p xpoints points along the X axis.
      @p ypoints points along the Y axis. 
      @p color The color.
   */
  virtual void drawPolygon ( const std::vector <double > & xpoints,
			     const std::vector <double > & ypoints,
			     const Color & color,
			     const Color & edge );


  /** Draws a text string at a point in the view's coordinate system.
      
      @param s The string to be drawn.  
      
      @param x The x coordinate in the view's coordinate system.
      
      @param y The y coordinate in the view's coordinate system.
      
      @param fontsize The font size.  If zero, then taken from the
      font object.
    
      @param angle The angle to draw.  90 degrees is vertical with the
      beginning of the text towards the bottom.

      @param xp The horizontal alignment with respect to the
      coordinate.  'r' means the coordinate is on the right side of
      the text, 'c' means centered, and 'l' for the left side.

      @param yp The vertical alignment with respect to the
      coordinate. 't' means toward the top, 'c' means centered, and
      'b' means bottom.

      @param resize If @c true, the bounding rectangle of the view
      should be re-sized to fit the text string.

      @param font If not a null pointer, then the font object to be
      used, otherwise the default font will be used.
      
      @param color If not given as argument, the default color is that
      of the default Color constructor which is black.

  */
  virtual void drawText ( const std::string &s, double x, double y,
			  double fontsize, double angle = 0.0,
			  char xp = 'l', char yp = 't',
			  bool resize = false,
			  const FontBase * font = 0,
			  const Color * color = 0 ) = 0;


  /** Draws a image. This is called by drawLatex. 
      Meaning of position: 0.Full 1.Top 2.Bottom 3.Left
      TODO: use enum for position.
  */
  virtual void drawImage ( const std::string &filename, int position = 0);

  /** Draws a Latex equation. This function will call drawImage. 
      Meaning of position: 0.Full 1.Top 2.Bottom 3.Left 
  */ 
  virtual void drawLatex ( const std::string &eq, int position = 0);

  /** Draws symbol points.  @a x and @a y are the coordinates, @a type
      is the type of symbol, and @a sym_size is the size. All symbols
      are draw in the same color. */
  virtual void drawPoints ( const std::vector<double> & x,
			    const std::vector<double> & y,
			    Symbol::Type type, 
			    double sym_size, 
			    const Color & color ) = 0;

  /** Draws symbol points.  @a x and @a y are the coordinates, @a type
      is the type of symbol, and @a sym_size is the size. @a hue is
      the hue parameters for each point.  The saturation and brightness
      are set to 1.0. 
  */
  virtual void drawPoints ( const std::vector< double > & x,
			    const std::vector< double > & y, 
			    const std::vector< Color > & colors,
			    Symbol::Type type, 
			    double sym_size ) = 0;

  /** Draws a colored square.  Used for shading on the cuts and the
      gray plot. */
  virtual void drawSquare ( double x1, double y1, double x2, double y2,
			    int red, int green, int blue ) = 0;

  /** Draws a colored square in view space. Used for shading on the cuts
      and the gray plot. */
  virtual void drawViewSquare ( double x1, double y1, double x2, double y2,
				int red, int green, int blue ) = 0;

  /** Returns the range of the data space on specified axis. 
   */
  const Range & getRange ( Axes::Type axis ) const;

  /** Is called by the AxisRepBase object (or one of its derived
   *  objects), and returns the rectangle where the drawing is
   *  made. */
  const Rect & getUserRect () const;

  /** Returns the rectangle before transform.
   */
  const Rect & getRawRect () const;

  /** Returns the drawing Rectangle in the devices coordinate system.
      Must be implemented in derived class. */
  virtual Rect getDrawRect() const = 0;

  /** Update the drawing Rectangle in the devices coordinate system. */
  virtual void updateDrawRect();

  /** Sets the drawing Rectangle in the devices coordinate system. */
  virtual void setDrawRect ( double x, double y, double w, double h ) = 0;

  /** Converts a coordinate in user space to drawing space along the X
      axis. */
  virtual double userToDrawX ( double x ) const = 0;
  virtual double userToDrawXAutoInv ( double x )  const = 0;

  /** Converts a coordinate in user space to drawing space along the
      Y axis. */
  virtual double userToDrawY ( double y ) const = 0;

  /** Converts a coordinate in user space to drawing space along the
      color (X) axis. */
  virtual double userToDrawColor ( double c ) const = 0;

  /** Get the aspect ratio. */
  virtual double getAspectRatio () const;

  /** Responds to notification that the PlotterBase object is being deleted.
   */
  virtual void willDelete ( const Observable * plotter );

};

} // namespace hippodraw

#endif // _ViewBase_H_
