/* -*- mode: c++ -*- */

/** @file

hippodraw::PeriodicBinaryTransform  class interface

Copyright (C) 2001-2004, 2006   The Board of Trustees of The Leland
Stanford Junior University.  All Rights Reserved.

$Id: PeriodicBinaryTransform.h,v 1.15 2006/02/02 22:53:15 xiefang Exp $

*/

#ifndef _PeriodicBinaryTransform_H_
#define _PeriodicBinaryTransform_H_

#ifdef _MSC_VER
#include "msdevstudio/MSconfig.h" // for CLONE_DEFECT
#endif

#include <math.h>

#include "BinaryTransform.h"

#include "axes/AxisTick.h"
#include "axes/Range.h"

#define	UNITS_DEGREES	1.0
#define	UNITS_RADIANS	(M_PI/180.0)
#define	UNITS_HOURS	(12.0/180.0)

namespace hippodraw {

/** A Periodic transform that transforms coordinates from one 2D coordinate
    system to another.
 
    @author kaustuv <kaustuv@stanford.edu>
    @author Xie Fang <xiefang@stanford.edu>
*/
class MDL_HIPPOPLOT_API PeriodicBinaryTransform : public BinaryTransform
{

protected:
  
  /** The limits on X axis of the transform */ 
  Range m_x_limits;
  
  /** The limits on Y axis of the transform */ 
  Range m_y_limits;
  
  /** The xoffset of this periodic transform */
  double m_x_offset;
  
  /** The yoffset of this periodic transform */
  double m_y_offset;

  /** Units for the x axis */
  double m_x_units;

  /** Units for the y axis */
  double m_y_units;

  /** The default constructor. */
  PeriodicBinaryTransform();

  /** The constructor that take the z transform as argument also it takes
      and argument which states if it is a periodic transformation
      (default false), next optional argument says if this transform needs
      a grid or not (default is false), and if it needs x and y ticks or
      not (Default is true). Finally we introduce xlo, xhi, ylow and yhi
      which define the appropriate limits on X and Y axis */
  PeriodicBinaryTransform ( UnaryTransform *, bool = false, bool  = false,
			    bool  = true, bool  = true,
			    double = -180, double = +180,double =UNITS_DEGREES,
			    double =  -90, double =  +90,double =UNITS_DEGREES
			  );
  
  /** The copy constructor. */
  PeriodicBinaryTransform ( const PeriodicBinaryTransform & );





  /** The ticks last generated by this transform.
   */
  std::vector < AxisTick > m_ticks;

  /** Helps to decide the tick size for the corresponding axis. */
  void setTickStep( AxisModelBase & axis );

  /** Sets the first tick on the axis. */
  void setFirstTick( AxisModelBase & axis );

  /** Generates the ticks in the axis. */
  const std::vector < AxisTick > &
  genTicks ( AxisModelBase & axis, hippodraw::Axes::Type axistype );

  
public:
  
  /** The virtual destructor. */
  virtual ~PeriodicBinaryTransform();

  /** Returns the Range limits of the first coordinate. */
  virtual const Range & limitX() const;

  /** Sets the Range limits of the first coordinate. This
   * should only be used for (-180,180) -> (0,360) changes
   * and such things. */
  virtual void setLimitX(const Range &);

  /** Returns the Range limits of the second coordinate. */
  virtual const Range & limitY() const;

  /** Sets the Range limits of the first coordinate. This
   * should only be used for (-180,180) -> (0,360) changes
   * and such things. */
  virtual void setLimitY(const Range &);

  /** Returns the rotation of the (periodic) transform around the specified 
   *  axis, in radians. */
  double rotation(Axes::Type axis) const; 

  /** Sets the rotation of the (periodic) transform around the specified 
   *  axis, in radians. */
  void setRotation(double offset, Axes::Type axis); 

  /** Sets the angular units of the (periodic) transform */
  void setUnits (double units, Axes::Type axis);

  /** Returns the angular units of the (periodic) transform */
  double units (Axes::Type axis) const;

  /** Modulo Addition along either X or Y axis */
  double moduloAdd ( double a1, double a2, hippodraw::Axes::Type axis ) const;
  
  /** Modulo Subtraction along either X or Y axis */
  double moduloSub ( double s1, double s2, hippodraw::Axes::Type axis ) const; 
  
  /** Modulo Addition along X axis */
  double moduloAddX ( double x1, double x2 ) const;

  /** Modulo Addition along Y axis */
  double moduloAddY ( double y1, double y2 ) const;

  /** Modulo Subtraction along X axis  */
  double moduloSubX ( double x1, double x2 ) const;

  /** Modulo Subtraction along Y axis  */
  double moduloSubY ( double y1, double y2 ) const;


  virtual Rect calcRectangle ( const Range & x, 
			       const Range & y );


  /** Rotates lat, lon by the offset angles specificied with setOffset */
  virtual void rotateByOffsets ( double &lat, double &lon) const;

  virtual void validate ( Range & lat, Range & lon ) const;

  virtual const std::vector < AxisTick > &
  setTicks ( AxisModelBase & axis_model, hippodraw::Axes::Type axis );
  
  /** Sets the range of given axis to be a new "nice" within the
      limits given 
      @todo This code is duplicated and should move up the hierarchy.
*/
  virtual void adjustValues ( AxisModelBase & model,
			      hippodraw::Axes::Type  axes,
			      const Range & limit );


  virtual bool isLinearInXY () const;
};

} // namespace hippodraw

#endif // _PeriodicBinaryTransform_H_
