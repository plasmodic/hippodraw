/* -*- mode: c++ -*- */

/** @file

LogTransform  class interface

Copyright (C) 2001-2004   The Board of Trustees of The Leland
Stanford Junior University.  All Rights Reserved.

$Id: LogTransform.h,v 1.26 2005/10/30 00:10:18 pfkeb Exp $

*/

#ifndef _LogTransform_H_
#define _LogTransform_H_

#include "UnaryTransform.h"

namespace hippodraw {

class AxisModelBase;
class AxisTick;

/** A UnaryTransform which takes the log of the coordinate.

    @author Paul F. Kunz <Paul_Kunz@slac.stanford.edu>
*/
class MDL_HIPPOPLOT_API LogTransform : public UnaryTransform
{
private:

  /** The ticks generated by this transform.
   */
  std::vector < AxisTick > m_ticks;

  void setFirstTick( AxisModelBase & );
  void setTickStep( AxisModelBase & );
  const std::vector < AxisTick > &
  genTicks ( AxisModelBase & );
  
  double prevStep ( double current, AxisModelBase & axis );
  double nextStep ( double current, AxisModelBase & axis );

  const Range & adjustLogValues ( AxisModelBase & axis );
  
public:

  /** The default constructor. */
  LogTransform ();

  /** The copy constructor. */
  LogTransform ( const LogTransform & );

  /** The virtual destructor. */
  virtual ~LogTransform();

  /** Creates a new Transform object by copying an existing one. */
#ifdef CLONE_DEFECT
  virtual TransformBase * clone () const;
#else
  virtual LogTransform  * clone () const;
#endif

  virtual bool isLinear () const;
  
  /** Transforms the coordinate @ x. If the coordinate is
      non-positive, it is transformed to @c -DBL_MAX as defined in
      float.h. */
  virtual void transform ( double & x ) const;
  
  /** Inverse transforms the coordinate @a x. */
  virtual void inverseTransform ( double & x ) const;
  
  /** Transforms each element of the vector @a x.  If any element is
      non positive, it is transformed to @c -DBL_MAX. */
  virtual void transform ( std::vector< double > & x ) const;
  
  /** Validates the Range, and adjusts the argument Range so that the
      values are positive. */
  virtual void validate ( Range & ) const;
  
  /** Sets the vector of ticks along the axis to which this 
      Log transform is applied */
  virtual const std::vector < AxisTick > &
  setTicks ( AxisModelBase & axis );
  
  /** Sets the range of given axis to be a new "nice" within the
      limits given.
  */
  const Range & adjustValues ( AxisModelBase & axis, const Range & limit );

};

} // namespace hippodraw

#endif // _LogTransform_H_
