/** @file

hippodraw::BinToGPink class implementation

Copyright (C) 2007   The Board of Trustees of The Leland Stanford Junior
University.  All Rights Reserved.

$Id: BinToBlueRed.cxx,v 1.1 2007/01/22 22:35:05 pfkeb Exp $

*/

#include "BinToBlueRed.h"

using namespace hippodraw;

int BinToBlueRed::reds[256] =
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32,
36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 85, 89, 93, 97, 101,
105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157,
161, 165, 170, 174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214,
218, 222, 226, 230, 234, 238, 242, 246, 250, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255};
int BinToBlueRed::greens[256] =
{ 0, 1, 2, 3, 4, 8, 12, 16, 21, 25, 29, 33, 38, 42, 46, 50,
55, 59, 63, 67, 72, 76, 80, 84, 89, 93, 97, 101, 106, 110, 114, 118,
123, 127, 131, 135, 140, 144, 148, 152, 157, 161, 165, 169, 174, 178,
182, 186, 191, 195, 199, 203, 208, 212, 216, 220, 225, 229, 233, 237,
242, 246, 250, 255, 255, 251, 247, 243, 239, 235, 231, 227, 223, 219,
215, 211, 207, 203, 199, 195, 191, 187, 183, 179, 175, 170, 166, 162,
158, 154, 150, 146, 142, 138, 134, 130, 126, 122, 118, 114, 110, 106,
102, 98, 94, 90, 85, 81, 77, 73, 69, 65, 61, 57, 53, 49, 45, 41, 37, 33,
29, 25, 21, 17, 13, 9, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  int BinToBlueRed::blues[256]=
{ 0, 1, 2, 3, 4, 8, 12, 16, 21, 25, 29, 33, 38, 42, 46, 50,
55, 59, 63, 67, 72, 76, 80, 84, 89, 93, 97, 101, 106, 110, 114, 118,
123, 127, 131, 135, 140, 144, 148, 152, 157, 161, 165, 169, 174, 178,
182, 186, 191, 195, 199, 203, 208, 212, 216, 220, 225, 229, 233, 237,
242, 246, 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 251, 247, 243, 239, 235, 231, 227,
223, 218, 214, 210, 206, 202, 198, 194, 190, 186, 181, 177, 173, 169,
165, 161, 157, 153, 149, 144, 140, 136, 132, 128, 124, 120, 116, 112,
107, 103, 99, 95, 91, 87, 83, 79, 75, 70, 66, 62, 58, 54, 50, 46, 42,
  38, 33, 29, 25, 21, 17, 13, 9, 5, 0, 0};
BinToBlueRed::
BinToBlueRed ( const char * name )
  : BinToColorMap ( name )
{
  m_reds.resize ( 256);
  m_greens.resize ( 256 );
  m_blues.resize ( 256 );

  for ( int i = 0; i < 256; i++ ) {
    m_reds  [i] = reds[i];
    m_greens[i] = greens[i];
    m_blues [i] = blues[i];
  }
}

BinToBlueRed::BinToBlueRed ( const BinToBlueRed & bin_to_color )
  : BinToColorMap ( bin_to_color )
{
}

BinToColor * BinToBlueRed::clone () const
{
  return new BinToBlueRed ( *this );
}

